from django.db import models
from datetime import date
from django.utils.text import slugify
import uuid
from django.core.validators import MinValueValidator, MaxValueValidator
from django.shortcuts import reverse


class Category(models.Model):
    name = models.CharField(max_length=100)
    image= models.ImageField(upload_to='categories/')
    slug = models.SlugField(max_length=100, unique=True, null=True, blank=True, editable=False)

    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super(Category, self).save(*args, **kwargs)

    @staticmethod
    def get_all_categories():
        return Category.objects.all()

    def get_absolute_url(self):
        return reverse("store:products_by_category", kwargs={
            'slug_cat': self.slug
        })

    def __str__(self):
        return self.name

    class Meta:
        # order by id
        ordering = ('id',)
        verbose_name_plural = 'Categories'


class Product(models.Model):
    name = models.CharField(max_length=200)
    slug = models.SlugField(max_length=200, unique=True, null=True, blank=True, editable=False)
    price= models.DecimalField(default=0, decimal_places=2, max_digits=10)
    category= models.ForeignKey(Category,on_delete=models.CASCADE)
    description= models.TextField(max_length=500, blank=True, null= True)
    image= models.ImageField(upload_to='uploads/products/')
    active = models.BooleanField(default=True)
    created = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super(Product, self).save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse("store:product_detail", kwargs={
            'slug_cat': self.category.slug,
            'slug_prod': self.slug
        })

    @staticmethod
    def get_all_products():
        return Product.objects.all()

    @staticmethod
    def get_all_products_by_category_slug(slug_cat):
        category = Category.objects.get(slug=slug_cat)
        return Product.objects.filter(category=category)
    
    def __str__(self):
        return self.name


class Order(models.Model):
    # device id generated by javascript, use this instead of user
    device = models.CharField(max_length=100, editable=False)
    name = models.CharField(max_length=100, blank=True)
    email = models.EmailField(blank=True)
    phone = models.CharField(max_length=100, blank=True)
    address = models.CharField(max_length=200, blank=True)
    city = models.CharField(max_length=100, blank=True)
    date_ordered = models.DateTimeField(auto_now_add=True)
    # when the customer indicates that he paid for the order, completed = True
    completed = models.BooleanField(default=False)
    # when the seller confirms that the order was paid for, paid = True
    paid = models.BooleanField(default=False)
    # when the seller delivers the order, delivered = True
    delivered = models.BooleanField(default=False)
    # uuid will identify the order and will be included in the payment link
    uuid = models.UUIDField(default=uuid.uuid4, editable=False)
    
    def __str__(self):
        return "device: " + str(self.device) + "uuid: " + str(self.uuid) + "date_ordered: " + str(self.date_ordered) + "completed: " + str(self.completed) + "paid: " + str(self.paid) + "delivered: " + str(self.delivered)
    
    @property
    def get_cart_total(self):
        items = self.items.all()
        total = sum([item.get_total for item in items])
        return total

    @property
    def get_cart_items(self):
        items = self.items.all()
        total = sum([item.quantity for item in items])
        return total

class OrderItem(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    date_added = models.DateTimeField(auto_now_add=True)

    @property
    def get_total(self):
        total = float(self.product.price) * int(self.quantity)
        return total
    
    def __str__(self):
        return str(self.product.name) + " - " + str(self.order.uuid) + " - " + str(self.quantity) + " - " + str(self.get_total)
    
    class Meta:
        ordering = ['-date_added']